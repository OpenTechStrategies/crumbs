/////////////////////////////////////////////////////////////////////////////
// Name:        filelisttool.cpp
// Purpose:     
// Author:      RAGO
// Modified by: 
// Created:     Fri  4 Apr 10:50:54 2014
// RCS-ID:      
// Copyright:   (C) 2014 crumbssoftware.com
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (Personal Edition), Fri 4 Apr 10:50:54 2014

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "cvfilelisttool.h"

////@begin XPM images
////@end XPM images


/*
 * CVFileListTool type definition
 */

IMPLEMENT_CLASS( CVFileListTool, wxDialog )


/*
 * CVFileListTool event table definition
 */

BEGIN_EVENT_TABLE( CVFileListTool, wxDialog )

////@begin CVFileListTool event table entries
    EVT_BUTTON( wxID_CLOSE, CVFileListTool::OnCloseClick )
////@end CVFileListTool event table entries

END_EVENT_TABLE()


/*
 * CVFileListTool constructors
 */

CVFileListTool::CVFileListTool()
{
    Init();
}

CVFileListTool::CVFileListTool( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create( parent, id, caption, pos, size, style );
}


/*
 * FileListTool creator
 */

bool CVFileListTool::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CVFileListTool creation
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    Centre();
////@end CVFileListTool creation
    return true;
}


/*
 * CVFileListTool destructor
 */

CVFileListTool::~CVFileListTool()
{
////@begin CVFileListTool destruction
////@end CVFileListTool destruction
}


/*
 * Member initialisation
 */

void CVFileListTool::Init()
{
////@begin CVFileListTool member initialisation
    m_dirPicker = NULL;
    m_textExtension = NULL;
    m_textPrefix = NULL;
////@end CVFileListTool member initialisation
}


/*
 * Control creation for FileListTool
 */

void CVFileListTool::CreateControls()
{
    
    
    m_dirPicker = new wxDirPickerCtrl(this,ID_FILELISTTOOL_DIRPICKER);
    
////@begin CVFileListTool content construction
    // Generated by DialogBlocks, Sun 29 Jan 17:20:02 2017 (Personal Edition)

    CVFileListTool* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxStaticText* itemStaticText3 = new wxStaticText( itemDialog1, wxID_STATIC, _("File list analyzer"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer2->Add(itemStaticText3, 0, wxALIGN_LEFT|wxALL, 5);

    wxStaticText* itemStaticText4 = new wxStaticText( itemDialog1, wxID_STATIC, _("Pick a folder to scan..."), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer2->Add(itemStaticText4, 0, wxALIGN_LEFT|wxALL, 5);

    m_dirPicker = (wxDirPickerCtrl *) FindWindow(ID_FILELISTTOOL_DIRPICKER);
    wxASSERT( m_dirPicker != NULL );
    itemBoxSizer2->Add(m_dirPicker, 0, wxGROW|wxALL, 5);

    wxStaticText* itemStaticText6 = new wxStaticText( itemDialog1, wxID_STATIC, _("Set extension"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer2->Add(itemStaticText6, 0, wxALIGN_LEFT|wxALL, 5);

    m_textExtension = new wxTextCtrl( itemDialog1, ID_FILELISTTOOL_TEXT_EXTENSION, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer2->Add(m_textExtension, 0, wxALIGN_LEFT|wxALL, 5);

    wxStaticText* itemStaticText8 = new wxStaticText( itemDialog1, wxID_STATIC, _("Set Prefix"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer2->Add(itemStaticText8, 0, wxALIGN_LEFT|wxALL, 5);

    m_textPrefix = new wxTextCtrl( itemDialog1, ID_FILELISTTOOL_TEXT_PREFIX, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer2->Add(m_textPrefix, 0, wxALIGN_LEFT|wxALL, 5);

    wxButton* itemButton10 = new wxButton( itemDialog1, wxID_CLOSE, _("Go!"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer2->Add(itemButton10, 0, wxALIGN_RIGHT|wxALL, 5);

////@end CVFileListTool content construction
}


/*
 * Should we show tooltips?
 */

bool CVFileListTool::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap CVFileListTool::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CVFileListTool bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CVFileListTool bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon CVFileListTool::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CVFileListTool icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CVFileListTool icon retrieval
}


void CVFileListTool::vSetPath(wxString sPath)
{
    m_dirPicker->SetPath(sPath);
    
}



wxString CVFileListTool::sGetPath()
{
    return m_dirPicker->GetPath();
}

wxString CVFileListTool::sGetExtension()
{
   return m_textExtension->GetValue();
}

wxString CVFileListTool::sGetPrefix()
{
    return m_textPrefix->GetValue();
}



/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_CLOSE
 */

void CVFileListTool::OnCloseClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_CLOSE in CVFileListTool.
    // Before editing this code, remove the block markers.
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_CLOSE in CVFileListTool.

    EndModal(wxID_OK);
}

