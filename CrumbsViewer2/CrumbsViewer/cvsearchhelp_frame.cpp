/////////////////////////////////////////////////////////////////////////////
// Name:        cvsearchhelp_frame.cpp
// Purpose:     
// Author:      RAGO
// Modified by: 
// Created:     Sun 30 Mar 16:47:12 2014
// RCS-ID:      
// Copyright:   (C) 2014 crumbssoftware.com
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (Personal Edition), Sun 30 Mar 16:47:12 2014

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "cvsearchhelp_frame.h"

////@begin XPM images
////@end XPM images


/*
 * CVSearchHelp_frame type definition
 */

IMPLEMENT_CLASS( CVSearchHelp_frame, wxFrame )


/*
 * CVSearchHelp_frame event table definition
 */

BEGIN_EVENT_TABLE( CVSearchHelp_frame, wxFrame )

////@begin CVSearchHelp_frame event table entries
    EVT_BUTTON( ID_BUTTON_CLOSE, CVSearchHelp_frame::OnButtonCloseClick )
////@end CVSearchHelp_frame event table entries

END_EVENT_TABLE()


/*
 * CVSearchHelp_frame constructors
 */

CVSearchHelp_frame::CVSearchHelp_frame()
{
    Init();
}

CVSearchHelp_frame::CVSearchHelp_frame( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create( parent, id, caption, pos, size, style );
}


/*
 * CVSearchHelp_frame creator
 */

bool CVSearchHelp_frame::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CVSearchHelp_frame creation
    wxFrame::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CVSearchHelp_frame creation
    return true;
}


/*
 * CVSearchHelp_frame destructor
 */

CVSearchHelp_frame::~CVSearchHelp_frame()
{
////@begin CVSearchHelp_frame destruction
////@end CVSearchHelp_frame destruction
}


/*
 * Member initialisation
 */

void CVSearchHelp_frame::Init()
{
////@begin CVSearchHelp_frame member initialisation
////@end CVSearchHelp_frame member initialisation
}


/*
 * Control creation for CVSearchHelp_frame
 */

void CVSearchHelp_frame::CreateControls()
{    
////@begin CVSearchHelp_frame content construction
    // Generated by DialogBlocks, Sun 29 Jan 17:20:20 2017 (Personal Edition)

    CVSearchHelp_frame* itemFrame1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemFrame1->SetSizer(itemBoxSizer2);

    wxStaticText* itemStaticText3 = new wxStaticText( itemFrame1, wxID_STATIC, _("Search Help and Tips"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer2->Add(itemStaticText3, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxTextCtrl* itemTextCtrl4 = new wxTextCtrl( itemFrame1, ID_TEXTCTRL1, _("Italy\t\t\twill search for the word \"italy\" in the documents, case does not matter.\nItaly AND europe    \twill search for documents that contain both words \"italy\" AND \"Europe\"\nItaly europe   \t\tsame than before, the AND is implicit.\nItaly OR europe  \twill search for documents that contain either \"Italy\" OR \"Europe\"\nItaly -Europe  \t\twill match documents that contain Italy, but NOT europe\nMill*     \t\twill match words that start with Mill. E.g.  Million, Millenary, Millennium, etc.\n\"Italy is great\"  \twill match the whole phrase (use quotes for full phrases)\n\"Italy is great\" AND \"the euro is expensive\"  \twill match both phrases\n\nItaly NEAR Europe  \twill match documents where the word italy is found nearby the word europe (about 10 words)\nItaly NEAR/3 Europe  \twill match documents where the word Italy is found up to 3 words from Europe.\n\nFor more complex searches parenthesis, quotes and the operators AND, OR, NOT can be used.\n( \"Italy is great\" AND \"Europe is far\") NOT \"old germany\"  will find documents with the first two phrases, and reject the ones that mention \"Old germany\""), wxDefaultPosition, wxSize(800, 300), wxTE_MULTILINE|wxTE_READONLY );
    itemBoxSizer2->Add(itemTextCtrl4, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxButton* itemButton5 = new wxButton( itemFrame1, ID_BUTTON_CLOSE, _("Close"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer2->Add(itemButton5, 0, wxALIGN_RIGHT|wxALL, 5);

////@end CVSearchHelp_frame content construction
}


/*
 * Should we show tooltips?
 */

bool CVSearchHelp_frame::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap CVSearchHelp_frame::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CVSearchHelp_frame bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CVSearchHelp_frame bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon CVSearchHelp_frame::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CVSearchHelp_frame icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CVSearchHelp_frame icon retrieval
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON_CLOSE
 */

void CVSearchHelp_frame::OnButtonCloseClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON_CLOSE in CVSearchHelp_frame.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON_CLOSE in CVSearchHelp_frame.
    
    Show(false);
}

